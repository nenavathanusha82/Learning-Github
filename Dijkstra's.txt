Dijkstra's Algorithm
-----------------------

import heapq

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v, weight):
        if u not in self.graph:
            self.graph[u] = []
        self.graph[u].append((v, weight))

def dijkstra(graph, start):
    heap = [(0, start)]
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0

    while heap:
        current_distance, current_vertex = heapq.heappop(heap)

        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex]:
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(heap, (distance, neighbor))

    return distances

def build_weighted_graph():
    g = Graph()
    num_edges = int(input("Enter the number of edges: "))
    print("Enter the edges and weights (format: u v weight):")
    for _ in range(num_edges):
        u, v, weight = map(int, input().split())
        g.add_edge(u, v, weight)
    return g

if __name__ == "__main__":
    weighted_graph = build_weighted_graph()
    start_vertex = int(input("Enter the starting vertex for Dijkstra's algorithm: "))

    shortest_distances = dijkstra(weighted_graph.graph, start_vertex)

    print("\nShortest distances from vertex", start_vertex)
    for vertex, distance in shortest_distances.items():
        print(f"To {vertex}: {distance}")
